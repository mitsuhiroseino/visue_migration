module.exports = [
  { lowercamelcase: 'adjoin', uppercamelcase: 'Adjoin', snakecase: 'ADJOIN' },
  {
    lowercamelcase: 'affine',
    uppercamelcase: 'Affine',
    snakecase: 'AFFINE',
    argDefs: ['matrix: string;'],
    args: 'matrix',
  },
  {
    lowercamelcase: 'antialias',
    uppercamelcase: 'Antialias',
    snakecase: 'ANTIALIAS',
    argDefs: ['enable: boolean;'],
    args: 'enable',
  },
  {
    lowercamelcase: 'append',
    uppercamelcase: 'Append',
    snakecase: 'APPEND',
    argDefs: ['image: string | string[];', 'ltr?: boolean;'],
    args: 'image,ltr',
  },
  {
    lowercamelcase: 'authenticate',
    uppercamelcase: 'Authenticate',
    snakecase: 'AUTHENTICATE',
    argDefs: ['password: string;'],
    args: 'password',
  },
  { lowercamelcase: 'autoOrient', uppercamelcase: 'AutoOrient', snakecase: 'AUTO_ORIENT' },
  { lowercamelcase: 'average', uppercamelcase: 'Average', snakecase: 'AVERAGE' },
  { lowercamelcase: 'backdrop', uppercamelcase: 'Backdrop', snakecase: 'BACKDROP' },
  {
    lowercamelcase: 'background',
    uppercamelcase: 'Background',
    snakecase: 'BACKGROUND',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'bitdepth',
    uppercamelcase: 'Bitdepth',
    snakecase: 'BITDEPTH',
    argDefs: ['bits: number;'],
    args: 'bits',
  },
  {
    lowercamelcase: 'blackThreshold',
    uppercamelcase: 'BlackThreshold',
    snakecase: 'BLACK_THRESHOLD',
    argDefs: ['intensity: number;', 'red: number;', 'green: number;', 'blue: number;', 'opacity?: number;'],
    args: 'intensity,red,green,blue,opacity',
  },
  {
    lowercamelcase: 'bluePrimary',
    uppercamelcase: 'BluePrimary',
    snakecase: 'BLUE_PRIMARY',
    argDefs: ['x: number;', 'y: number;'],
    args: 'x,y',
  },
  {
    lowercamelcase: 'blur',
    uppercamelcase: 'Blur',
    snakecase: 'BLUR',
    argDefs: ['radius: number;', 'sigma?: number;'],
    args: 'radius,sigma',
  },
  {
    lowercamelcase: 'border',
    uppercamelcase: 'Border',
    snakecase: 'BORDER',
    argDefs: ['width: number;', 'height: number;'],
    args: 'width,height',
  },
  {
    lowercamelcase: 'borderColor',
    uppercamelcase: 'BorderColor',
    snakecase: 'BORDER_COLOR',
    argDefs: ['color: string;'],
    args: 'color',
  },
  { lowercamelcase: 'box', uppercamelcase: 'Box', snakecase: 'BOX', argDefs: ['color: string;'], args: 'color' },
  {
    lowercamelcase: 'channel',
    uppercamelcase: 'Channel',
    snakecase: 'CHANNEL',
    argDefs: ['type: NamedColor | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'charcoal',
    uppercamelcase: 'Charcoal',
    snakecase: 'CHARCOAL',
    argDefs: ['factor: number;'],
    args: 'factor',
  },
  {
    lowercamelcase: 'chop',
    uppercamelcase: 'Chop',
    snakecase: 'CHOP',
    argDefs: ['width: number;', 'height: number;', 'x?: number;', 'y?: number;'],
    args: 'width,height,x,y',
  },
  { lowercamelcase: 'clip', uppercamelcase: 'Clip', snakecase: 'CLIP' },
  { lowercamelcase: 'coalesce', uppercamelcase: 'Coalesce', snakecase: 'COALESCE' },
  {
    lowercamelcase: 'colorize',
    uppercamelcase: 'Colorize',
    snakecase: 'COLORIZE',
    argDefs: ['red: number;', 'green: number;', 'blue: number;'],
    args: 'red,green,blue',
  },
  {
    lowercamelcase: 'colorMap',
    uppercamelcase: 'ColorMap',
    snakecase: 'COLOR_MAP',
    argDefs: ["type: 'shared' | 'private' | string;"],
    args: 'type',
  },
  {
    lowercamelcase: 'colors',
    uppercamelcase: 'Colors',
    snakecase: 'COLORS',
    argDefs: ['colors: number;'],
    args: 'colors',
  },
  {
    lowercamelcase: 'colorspace',
    uppercamelcase: 'Colorspace',
    snakecase: 'COLORSPACE',
    argDefs: ['space: ColorSpace | string;'],
    args: 'space',
  },
  {
    lowercamelcase: 'command',
    uppercamelcase: 'Command',
    snakecase: 'COMMAND',
    argDefs: ['customCommand: string;'],
    args: 'customCommand',
  },
  {
    lowercamelcase: 'compose',
    uppercamelcase: 'Compose',
    snakecase: 'COMPOSE',
    argDefs: ['operator: ComposeOperator | string;'],
    args: 'operator',
  },
  {
    lowercamelcase: 'composite',
    uppercamelcase: 'Composite',
    snakecase: 'COMPOSITE',
    argDefs: ['changeImagePath: string;', 'maskImagePath?: string;'],
    args: 'changeImagePath,maskImagePath',
  },
  {
    lowercamelcase: 'compress',
    uppercamelcase: 'Compress',
    snakecase: 'COMPRESS',
    argDefs: ['type: CompressionType | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'contrast',
    uppercamelcase: 'Contrast',
    snakecase: 'CONTRAST',
    argDefs: ['multiplier: number;'],
    args: 'multiplier',
  },
  {
    lowercamelcase: 'convolve',
    uppercamelcase: 'Convolve',
    snakecase: 'CONVOLVE',
    argDefs: ['kernel: string;'],
    args: 'kernel',
  },
  { lowercamelcase: 'createDirectories', uppercamelcase: 'CreateDirectories', snakecase: 'CREATE_DIRECTORIES' },
  {
    lowercamelcase: 'crop',
    uppercamelcase: 'Crop',
    snakecase: 'CROP',
    argDefs: ['width: number;', 'height: number;', 'x?: number;', 'y?: number;', 'percent?: boolean;'],
    args: 'width,height,x,y,percent',
  },
  {
    lowercamelcase: 'cycle',
    uppercamelcase: 'Cycle',
    snakecase: 'CYCLE',
    argDefs: ['amount: number;'],
    args: 'amount',
  },
  { lowercamelcase: 'deconstruct', uppercamelcase: 'Deconstruct', snakecase: 'DECONSTRUCT' },
  {
    lowercamelcase: 'define',
    uppercamelcase: 'Define',
    snakecase: 'DEFINE',
    argDefs: ['value: string;'],
    args: 'value',
  },
  {
    lowercamelcase: 'delay',
    uppercamelcase: 'Delay',
    snakecase: 'DELAY',
    argDefs: ['centiseconds: number;'],
    args: 'centiseconds',
  },
  {
    lowercamelcase: 'density',
    uppercamelcase: 'Density',
    snakecase: 'DENSITY',
    argDefs: ['width: number;', 'height: number;'],
    args: 'width,height',
  },
  { lowercamelcase: 'despeckle', uppercamelcase: 'Despeckle', snakecase: 'DESPECKLE' },
  {
    lowercamelcase: 'displace',
    uppercamelcase: 'Displace',
    snakecase: 'DISPLACE',
    argDefs: ['horizontal: number;', 'vertical: number;'],
    args: 'horizontal,vertical',
  },
  {
    lowercamelcase: 'display',
    uppercamelcase: 'Display',
    snakecase: 'DISPLAY',
    argDefs: ['xServer: string;'],
    args: 'xServer',
  },
  {
    lowercamelcase: 'dispose',
    uppercamelcase: 'Dispose',
    snakecase: 'DISPOSE',
    argDefs: ['method: DisposeMethod | string;'],
    args: 'method',
  },
  {
    lowercamelcase: 'dissolve',
    uppercamelcase: 'Dissolve',
    snakecase: 'DISSOLVE',
    argDefs: ['percent: number;'],
    args: 'percent',
  },
  {
    lowercamelcase: 'dither',
    uppercamelcase: 'Dither',
    snakecase: 'DITHER',
    argDefs: ['enable?: boolean;'],
    args: 'enable',
  },
  {
    lowercamelcase: 'edge',
    uppercamelcase: 'Edge',
    snakecase: 'EDGE',
    argDefs: ['radius?: number;'],
    args: 'radius',
  },
  {
    lowercamelcase: 'emboss',
    uppercamelcase: 'Emboss',
    snakecase: 'EMBOSS',
    argDefs: ['radius?: number;'],
    args: 'radius',
  },
  {
    lowercamelcase: 'encoding',
    uppercamelcase: 'Encoding',
    snakecase: 'ENCODING',
    argDefs: ['encoding: Encoding | string;'],
    args: 'encoding',
  },
  {
    lowercamelcase: 'endian',
    uppercamelcase: 'Endian',
    snakecase: 'ENDIAN',
    argDefs: ['type: EndianType | string;'],
    args: 'type',
  },
  { lowercamelcase: 'enhance', uppercamelcase: 'Enhance', snakecase: 'ENHANCE' },
  { lowercamelcase: 'equalize', uppercamelcase: 'Equalize', snakecase: 'EQUALIZE' },
  {
    lowercamelcase: 'extent',
    uppercamelcase: 'Extent',
    snakecase: 'EXTENT',
    argDefs: ['width: number;', 'height: number;', 'options?: string;'],
    args: 'width,height,options',
  },
  {
    lowercamelcase: 'file',
    uppercamelcase: 'File',
    snakecase: 'FILE',
    argDefs: ['filename: string;'],
    args: 'filename',
  },
  {
    lowercamelcase: 'filter',
    uppercamelcase: 'Filter',
    snakecase: 'FILTER',
    argDefs: ['type: FilterType | string;'],
    args: 'type',
  },
  { lowercamelcase: 'flatten', uppercamelcase: 'Flatten', snakecase: 'FLATTEN' },
  { lowercamelcase: 'flip', uppercamelcase: 'Flip', snakecase: 'FLIP' },
  { lowercamelcase: 'flop', uppercamelcase: 'Flop', snakecase: 'FLOP' },
  {
    lowercamelcase: 'foreground',
    uppercamelcase: 'Foreground',
    snakecase: 'FOREGROUND',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'frame',
    uppercamelcase: 'Frame',
    snakecase: 'FRAME',
    argDefs: ['width: number;', 'height: number;', 'outerBevelWidth: number;', 'outBevelHeight: number;'],
    args: 'width,height,outerBevelWidth,outBevelHeight',
  },
  {
    lowercamelcase: 'fuzz',
    uppercamelcase: 'Fuzz',
    snakecase: 'FUZZ',
    argDefs: ['distance: number;', 'percent?: boolean;'],
    args: 'distance,percent',
  },
  {
    lowercamelcase: 'gamma',
    uppercamelcase: 'Gamma',
    snakecase: 'GAMMA',
    argDefs: ['r: number;', 'g: number;', 'b: number;'],
    args: 'r,g,b',
  },
  {
    lowercamelcase: 'gaussian',
    uppercamelcase: 'Gaussian',
    snakecase: 'GAUSSIAN',
    argDefs: ['radius: number;', 'sigma?: number;'],
    args: 'radius,sigma',
  },
  {
    lowercamelcase: 'geometry',
    uppercamelcase: 'Geometry',
    snakecase: 'GEOMETRY',
    argDefs: ['width: number;', 'height?: number;', 'option?: ResizeOption;', 'geometry: string;'],
    args: 'width,height,option,geometry',
  },
  {
    lowercamelcase: 'greenPrimary',
    uppercamelcase: 'GreenPrimary',
    snakecase: 'GREEN_PRIMARY',
    argDefs: ['x: number;', 'y: number;'],
    args: 'x,y',
  },
  {
    lowercamelcase: 'gravity',
    uppercamelcase: 'Gravity',
    snakecase: 'GRAVITY',
    argDefs: ['direction: GravityDirection | string;'],
    args: 'direction',
  },
  {
    lowercamelcase: 'highlightColor',
    uppercamelcase: 'HighlightColor',
    snakecase: 'HIGHLIGHT_COLOR',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'highlightStyle',
    uppercamelcase: 'HighlightStyle',
    snakecase: 'HIGHLIGHT_STYLE',
    argDefs: ['style: HighlightStyle | string;'],
    args: 'style',
  },
  {
    lowercamelcase: 'iconGeometry',
    uppercamelcase: 'IconGeometry',
    snakecase: 'ICON_GEOMETRY',
    argDefs: ['geometry: string;'],
    args: 'geometry',
  },
  {
    lowercamelcase: 'implode',
    uppercamelcase: 'Implode',
    snakecase: 'IMPLODE',
    argDefs: ['factor?: number;'],
    args: 'factor',
  },
  {
    lowercamelcase: 'in',
    uppercamelcase: 'In',
    snakecase: 'IN',
    argDefs: ['customArguments: string[];'],
    args: 'customArguments',
  },
  {
    lowercamelcase: 'intent',
    uppercamelcase: 'Intent',
    snakecase: 'INTENT',
    argDefs: ['type: IntentType | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'interlace',
    uppercamelcase: 'Interlace',
    snakecase: 'INTERLACE',
    argDefs: ['type: InterlaceType | string;'],
    args: 'type',
  },
  { lowercamelcase: 'label', uppercamelcase: 'Label', snakecase: 'LABEL', argDefs: ['name: string;'], args: 'name' },
  {
    lowercamelcase: 'lat',
    uppercamelcase: 'Lat',
    snakecase: 'LAT',
    argDefs: ['width: number;', 'height: number;', 'offset: number;', 'percent?: boolean;'],
    args: 'width,height,offset,percent',
  },
  {
    lowercamelcase: 'level',
    uppercamelcase: 'Level',
    snakecase: 'LEVEL',
    argDefs: ['blackPoint: number;', 'gamma: number;', 'whitePoint: number;', 'percent?: boolean;'],
    args: 'blackPoint,gamma,whitePoint,percent',
  },
  {
    lowercamelcase: 'limit',
    uppercamelcase: 'Limit',
    snakecase: 'LIMIT',
    argDefs: ['type: LimitType | string;', 'val: string;'],
    args: 'type,val',
  },
  {
    lowercamelcase: 'list',
    uppercamelcase: 'List',
    snakecase: 'LIST',
    argDefs: ['type: ListType | string;'],
    args: 'type',
  },
  { lowercamelcase: 'log', uppercamelcase: 'Log', snakecase: 'LOG', argDefs: ['format: string;'], args: 'format' },
  {
    lowercamelcase: 'loop',
    uppercamelcase: 'Loop',
    snakecase: 'LOOP',
    argDefs: ['iterations: number;'],
    args: 'iterations',
  },
  {
    lowercamelcase: 'lower',
    uppercamelcase: 'Lower',
    snakecase: 'LOWER',
    argDefs: ['width: number;', 'height: number;'],
    args: 'width,height',
  },
  {
    lowercamelcase: 'magnify',
    uppercamelcase: 'Magnify',
    snakecase: 'MAGNIFY',
    argDefs: ['factor: number;'],
    args: 'factor',
  },
  {
    lowercamelcase: 'map',
    uppercamelcase: 'Map',
    snakecase: 'MAP',
    argDefs: ['filename: string;'],
    args: 'filename',
  },
  {
    lowercamelcase: 'mask',
    uppercamelcase: 'Mask',
    snakecase: 'MASK',
    argDefs: ['filename: string;'],
    args: 'filename',
  },
  { lowercamelcase: 'matte', uppercamelcase: 'Matte', snakecase: 'MATTE' },
  {
    lowercamelcase: 'matteColor',
    uppercamelcase: 'MatteColor',
    snakecase: 'MATTE_COLOR',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'maximumError',
    uppercamelcase: 'MaximumError',
    snakecase: 'MAXIMUM_ERROR',
    argDefs: ['limit: number;'],
    args: 'limit',
  },
  {
    lowercamelcase: 'median',
    uppercamelcase: 'Median',
    snakecase: 'MEDIAN',
    argDefs: ['radius?: number;'],
    args: 'radius',
  },
  {
    lowercamelcase: 'minify',
    uppercamelcase: 'Minify',
    snakecase: 'MINIFY',
    argDefs: ['factor: number;'],
    args: 'factor',
  },
  {
    lowercamelcase: 'mode',
    uppercamelcase: 'Mode',
    snakecase: 'MODE',
    argDefs: ['mode: OperationMode | string;'],
    args: 'mode',
  },
  {
    lowercamelcase: 'modulate',
    uppercamelcase: 'Modulate',
    snakecase: 'MODULATE',
    argDefs: ['b: number;', 's?: number;', 'h?: number;'],
    args: 'b,s,h',
  },
  { lowercamelcase: 'monitor', uppercamelcase: 'Monitor', snakecase: 'MONITOR' },
  { lowercamelcase: 'monochrome', uppercamelcase: 'Monochrome', snakecase: 'MONOCHROME' },
  {
    lowercamelcase: 'montage',
    uppercamelcase: 'Montage',
    snakecase: 'MONTAGE',
    argDefs: ['otherImg: string;'],
    args: 'otherImg',
  },
  {
    lowercamelcase: 'morph',
    uppercamelcase: 'Morph',
    snakecase: 'MORPH',
    argDefs: ['otherImg: string | string[];', 'outName: string;', 'callback?: WriteCallback;'],
    args: 'otherImg,outName,callback',
  },
  { lowercamelcase: 'mosaic', uppercamelcase: 'Mosaic', snakecase: 'MOSAIC' },
  {
    lowercamelcase: 'motionBlur',
    uppercamelcase: 'MotionBlur',
    snakecase: 'MOTION_BLUR',
    argDefs: ['radius: number;', 'sigma?: number;', 'angle?: number;'],
    args: 'radius,sigma,angle',
  },
  { lowercamelcase: 'name', uppercamelcase: 'Name', snakecase: 'NAME' },
  { lowercamelcase: 'negative', uppercamelcase: 'Negative', snakecase: 'NEGATIVE' },
  {
    lowercamelcase: 'noise',
    uppercamelcase: 'Noise',
    snakecase: 'NOISE',
    argDefs: ['type: NoiseType | string | number;'],
    args: 'type',
  },
  { lowercamelcase: 'noop', uppercamelcase: 'Noop', snakecase: 'NOOP' },
  { lowercamelcase: 'normalize', uppercamelcase: 'Normalize', snakecase: 'NORMALIZE' },
  {
    lowercamelcase: 'opaque',
    uppercamelcase: 'Opaque',
    snakecase: 'OPAQUE',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'operator',
    uppercamelcase: 'Operator',
    snakecase: 'OPERATOR',
    argDefs: ['channel: string;', 'operator: ChannelOperator | string;', 'rvalue: number;', 'percent?: boolean;'],
    args: 'channel,operator,rvalue,percent',
  },
  {
    lowercamelcase: 'orderedDither',
    uppercamelcase: 'OrderedDither',
    snakecase: 'ORDERED_DITHER',
    argDefs: ['channelType: ChannelType | string;', 'NxN: string;'],
    args: 'channelType,NxN',
  },
  {
    lowercamelcase: 'out',
    uppercamelcase: 'Out',
    snakecase: 'OUT',
    argDefs: ['customArguments: string[];'],
    args: 'customArguments',
  },
  {
    lowercamelcase: 'outputDirectory',
    uppercamelcase: 'OutputDirectory',
    snakecase: 'OUTPUT_DIRECTORY',
    argDefs: ['directory: string;'],
    args: 'directory',
  },
  {
    lowercamelcase: 'page',
    uppercamelcase: 'Page',
    snakecase: 'PAGE',
    argDefs: ['width: number;', 'height: number;', "arg?: '%' | '!' | '<' | '>' | string;"],
    args: 'width,height,arg',
  },
  {
    lowercamelcase: 'pause',
    uppercamelcase: 'Pause',
    snakecase: 'PAUSE',
    argDefs: ['seconds: number;'],
    args: 'seconds',
  },
  { lowercamelcase: 'pen', uppercamelcase: 'Pen', snakecase: 'PEN', argDefs: ['color: string;'], args: 'color' },
  { lowercamelcase: 'ping', uppercamelcase: 'Ping', snakecase: 'PING' },
  {
    lowercamelcase: 'pointSize',
    uppercamelcase: 'PointSize',
    snakecase: 'POINT_SIZE',
    argDefs: ['size: number;'],
    args: 'size',
  },
  { lowercamelcase: 'noProfile', uppercamelcase: 'NoProfile', snakecase: 'NO_PROFILE' },
  {
    lowercamelcase: 'preview',
    uppercamelcase: 'Preview',
    snakecase: 'PREVIEW',
    argDefs: ['type: PreviewType | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'paint',
    uppercamelcase: 'Paint',
    snakecase: 'PAINT',
    argDefs: ['radius: number;'],
    args: 'radius',
  },
  {
    lowercamelcase: 'process',
    uppercamelcase: 'Process',
    snakecase: 'PROCESS',
    argDefs: ['command: string;'],
    args: 'command',
  },
  {
    lowercamelcase: 'profile',
    uppercamelcase: 'Profile',
    snakecase: 'PROFILE',
    argDefs: ['filename: string;'],
    args: 'filename',
  },
  { lowercamelcase: 'progress', uppercamelcase: 'Progress', snakecase: 'PROGRESS' },
  {
    lowercamelcase: 'randomThreshold',
    uppercamelcase: 'RandomThreshold',
    snakecase: 'RANDOM_THRESHOLD',
    argDefs: ['channelType: ChannelType;', 'LOWxHIGH: string;'],
    args: 'channelType,LOWxHIGH',
  },
  {
    lowercamelcase: 'quality',
    uppercamelcase: 'Quality',
    snakecase: 'QUALITY',
    argDefs: ['level: number;'],
    args: 'level',
  },
  {
    lowercamelcase: 'raise',
    uppercamelcase: 'Raise',
    snakecase: 'RAISE',
    argDefs: ['width: number;', 'height: number;'],
    args: 'width,height',
  },
  {
    lowercamelcase: 'recolor',
    uppercamelcase: 'Recolor',
    snakecase: 'RECOLOR',
    argDefs: ['matrix: string;'],
    args: 'matrix',
  },
  {
    lowercamelcase: 'redPrimary',
    uppercamelcase: 'RedPrimary',
    snakecase: 'RED_PRIMARY',
    argDefs: ['x: number;', 'y: number;'],
    args: 'x,y',
  },
  {
    lowercamelcase: 'region',
    uppercamelcase: 'Region',
    snakecase: 'REGION',
    argDefs: ['width: number;', 'height: number;', 'x?: number;', 'y?: number;'],
    args: 'width,height,x,y',
  },
  { lowercamelcase: 'remote', uppercamelcase: 'Remote', snakecase: 'REMOTE' },
  { lowercamelcase: 'render', uppercamelcase: 'Render', snakecase: 'RENDER' },
  {
    lowercamelcase: 'repage',
    uppercamelcase: 'Repage',
    snakecase: 'REPAGE',
    argDefs: [
      'width: number;',
      'height: number;',
      'xoff: number;',
      'yoff: number;',
      'arg?: string;',
      "reset: '+' | string;",
    ],
    args: 'width,height,xoff,yoff,arg,reset',
  },
  {
    lowercamelcase: 'sample',
    uppercamelcase: 'Sample',
    snakecase: 'SAMPLE',
    argDefs: ['geometry: string;'],
    args: 'geometry',
  },
  {
    lowercamelcase: 'samplingFactor',
    uppercamelcase: 'SamplingFactor',
    snakecase: 'SAMPLING_FACTOR',
    argDefs: ['horizontalFactor: number;', 'verticalFactor: number;'],
    args: 'horizontalFactor,verticalFactor',
  },
  {
    lowercamelcase: 'rawSize',
    uppercamelcase: 'RawSize',
    snakecase: 'RAW_SIZE',
    argDefs: ['width: number;', 'height: number;', 'offset?: number;'],
    args: 'width,height,offset',
  },
  {
    lowercamelcase: 'resample',
    uppercamelcase: 'Resample',
    snakecase: 'RESAMPLE',
    argDefs: ['horizontal: number;', 'vertical: number;'],
    args: 'horizontal,vertical',
  },
  {
    lowercamelcase: 'resize',
    uppercamelcase: 'Resize',
    snakecase: 'RESIZE',
    argDefs: ['width: number;', 'height?: number;', 'option?: ResizeOption;'],
    args: 'width,height,option',
  },
  {
    lowercamelcase: 'roll',
    uppercamelcase: 'Roll',
    snakecase: 'ROLL',
    argDefs: ['horizontal: number;', 'vertical: number;'],
    args: 'horizontal,vertical',
  },
  {
    lowercamelcase: 'rotate',
    uppercamelcase: 'Rotate',
    snakecase: 'ROTATE',
    argDefs: ['backgroundColor: string;', 'degrees: number;'],
    args: 'backgroundColor,degrees',
  },
  {
    lowercamelcase: 'scene',
    uppercamelcase: 'Scene',
    snakecase: 'SCENE',
    argDefs: ['index: number;'],
    args: 'index',
  },
  {
    lowercamelcase: 'scenes',
    uppercamelcase: 'Scenes',
    snakecase: 'SCENES',
    argDefs: ['start: number;', 'end: number;'],
    args: 'start,end',
  },
  {
    lowercamelcase: 'scale',
    uppercamelcase: 'Scale',
    snakecase: 'SCALE',
    argDefs: ['width: number;', 'height: number;'],
    args: 'width,height',
  },
  { lowercamelcase: 'screen', uppercamelcase: 'Screen', snakecase: 'SCREEN' },
  {
    lowercamelcase: 'segment',
    uppercamelcase: 'Segment',
    snakecase: 'SEGMENT',
    argDefs: ['clustherThreshold: number;', 'smoothingThreshold: number;'],
    args: 'clustherThreshold,smoothingThreshold',
  },
  {
    lowercamelcase: 'selectFrame',
    uppercamelcase: 'SelectFrame',
    snakecase: 'SELECT_FRAME',
    argDefs: ['frame: number;'],
    args: 'frame',
  },
  { lowercamelcase: 'sepia', uppercamelcase: 'Sepia', snakecase: 'SEPIA' },
  {
    lowercamelcase: 'set',
    uppercamelcase: 'Set',
    snakecase: 'SET',
    argDefs: ['attribute: string;', 'value: string;'],
    args: 'attribute,value',
  },
  {
    lowercamelcase: 'setFormat',
    uppercamelcase: 'SetFormat',
    snakecase: 'SET_FORMAT',
    argDefs: ['format: string;'],
    args: 'format',
  },
  {
    lowercamelcase: 'shade',
    uppercamelcase: 'Shade',
    snakecase: 'SHADE',
    argDefs: ['azimuth: number;', 'elevation: number;'],
    args: 'azimuth,elevation',
  },
  {
    lowercamelcase: 'shadow',
    uppercamelcase: 'Shadow',
    snakecase: 'SHADOW',
    argDefs: ['radius: number;', 'sigma?: number;'],
    args: 'radius,sigma',
  },
  { lowercamelcase: 'sharedMemory', uppercamelcase: 'SharedMemory', snakecase: 'SHARED_MEMORY' },
  {
    lowercamelcase: 'shave',
    uppercamelcase: 'Shave',
    snakecase: 'SHAVE',
    argDefs: ['width: number;', 'height: number;', 'percent?: boolean;'],
    args: 'width,height,percent',
  },
  {
    lowercamelcase: 'sharpen',
    uppercamelcase: 'Sharpen',
    snakecase: 'SHARPEN',
    argDefs: ['radius: number;', 'sigma?: number;'],
    args: 'radius,sigma',
  },
  {
    lowercamelcase: 'shear',
    uppercamelcase: 'Shear',
    snakecase: 'SHEAR',
    argDefs: ['xDegrees: number;', 'yDegress: number;'],
    args: 'xDegrees,yDegress',
  },
  { lowercamelcase: 'silent', uppercamelcase: 'Silent', snakecase: 'SILENT' },
  {
    lowercamelcase: 'snaps',
    uppercamelcase: 'Snaps',
    snakecase: 'SNAPS',
    argDefs: ['count: number;'],
    args: 'count',
  },
  {
    lowercamelcase: 'solarize',
    uppercamelcase: 'Solarize',
    snakecase: 'SOLARIZE',
    argDefs: ['threshold: number;'],
    args: 'threshold',
  },
  {
    lowercamelcase: 'spread',
    uppercamelcase: 'Spread',
    snakecase: 'SPREAD',
    argDefs: ['amount: number;'],
    args: 'amount',
  },
  {
    lowercamelcase: 'stegano',
    uppercamelcase: 'Stegano',
    snakecase: 'STEGANO',
    argDefs: ['offset: number;'],
    args: 'offset',
  },
  { lowercamelcase: 'stereo', uppercamelcase: 'Stereo', snakecase: 'STEREO' },
  { lowercamelcase: 'strip', uppercamelcase: 'Strip', snakecase: 'STRIP' },
  {
    lowercamelcase: 'swirl',
    uppercamelcase: 'Swirl',
    snakecase: 'SWIRL',
    argDefs: ['degrees: number;'],
    args: 'degrees',
  },
  {
    lowercamelcase: 'textFont',
    uppercamelcase: 'TextFont',
    snakecase: 'TEXT_FONT',
    argDefs: ['font: string;'],
    args: 'font',
  },
  {
    lowercamelcase: 'texture',
    uppercamelcase: 'Texture',
    snakecase: 'TEXTURE',
    argDefs: ['filename: string;'],
    args: 'filename',
  },
  {
    lowercamelcase: 'threshold',
    uppercamelcase: 'Threshold',
    snakecase: 'THRESHOLD',
    argDefs: ['value: number;', 'percent?: boolean;'],
    args: 'value,percent',
  },
  {
    lowercamelcase: 'thumb',
    uppercamelcase: 'Thumb',
    snakecase: 'THUMB',
    argDefs: [
      'width: number;',
      'height: number;',
      'outName: string;',
      'quality?: number;',
      "align?: 'topleft' | 'center' | string;",
      'callback: WriteCallback;',
    ],
    args: 'width,height,outName,quality,align,callback',
  },
  {
    lowercamelcase: 'thumbnail',
    uppercamelcase: 'Thumbnail',
    snakecase: 'THUMBNAIL',
    argDefs: ['width: number;', 'height: number;', 'options?: ResizeOption;'],
    args: 'width,height,options',
  },
  {
    lowercamelcase: 'tile',
    uppercamelcase: 'Tile',
    snakecase: 'TILE',
    argDefs: ['filename: string;'],
    args: 'filename',
  },
  {
    lowercamelcase: 'title',
    uppercamelcase: 'Title',
    snakecase: 'TITLE',
    argDefs: ['title: string;'],
    args: 'title',
  },
  {
    lowercamelcase: 'transform',
    uppercamelcase: 'Transform',
    snakecase: 'TRANSFORM',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'transparent',
    uppercamelcase: 'Transparent',
    snakecase: 'TRANSPARENT',
    argDefs: ['color: string;'],
    args: 'color',
  },
  {
    lowercamelcase: 'treeDepth',
    uppercamelcase: 'TreeDepth',
    snakecase: 'TREE_DEPTH',
    argDefs: ['depth: number;'],
    args: 'depth',
  },
  { lowercamelcase: 'trim', uppercamelcase: 'Trim', snakecase: 'TRIM' },
  {
    lowercamelcase: 'type',
    uppercamelcase: 'Type',
    snakecase: 'TYPE',
    argDefs: ['type: ImageType | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'update',
    uppercamelcase: 'Update',
    snakecase: 'UPDATE',
    argDefs: ['seconds: number;'],
    args: 'seconds',
  },
  {
    lowercamelcase: 'units',
    uppercamelcase: 'Units',
    snakecase: 'UNITS',
    argDefs: ['type: UnitType | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'unsharp',
    uppercamelcase: 'Unsharp',
    snakecase: 'UNSHARP',
    argDefs: ['radius: number;', 'sigma?: number;', 'amount?: number;', 'threshold?: number;'],
    args: 'radius,sigma,amount,threshold',
  },
  { lowercamelcase: 'usePixmap', uppercamelcase: 'UsePixmap', snakecase: 'USE_PIXMAP' },
  { lowercamelcase: 'view', uppercamelcase: 'View', snakecase: 'VIEW' },
  {
    lowercamelcase: 'virtualPixel',
    uppercamelcase: 'VirtualPixel',
    snakecase: 'VIRTUAL_PIXEL',
    argDefs: ['method: VirtualPixelMethod | string;'],
    args: 'method',
  },
  {
    lowercamelcase: 'visual',
    uppercamelcase: 'Visual',
    snakecase: 'VISUAL',
    argDefs: ['type: VisualType | string;'],
    args: 'type',
  },
  {
    lowercamelcase: 'watermark',
    uppercamelcase: 'Watermark',
    snakecase: 'WATERMARK',
    argDefs: ['brightness: number;', 'saturation: number;'],
    args: 'brightness,saturation',
  },
  {
    lowercamelcase: 'wave',
    uppercamelcase: 'Wave',
    snakecase: 'WAVE',
    argDefs: ['amplitude: number;', 'wavelength: number;'],
    args: 'amplitude,wavelength',
  },
  {
    lowercamelcase: 'whitePoint',
    uppercamelcase: 'WhitePoint',
    snakecase: 'WHITE_POINT',
    argDefs: ['x: number;', 'y: number;'],
    args: 'x,y',
  },
  {
    lowercamelcase: 'whiteThreshold',
    uppercamelcase: 'WhiteThreshold',
    snakecase: 'WHITE_THRESHOLD',
    argDefs: ['red: number;', 'green: number;', 'blue: number;', 'opacity?: number;', 'intensity: number;'],
    args: 'red,green,blue,opacity,intensity',
  },
  { lowercamelcase: 'window', uppercamelcase: 'Window', snakecase: 'WINDOW', argDefs: ['id: string;'], args: 'id' },
  { lowercamelcase: 'windowGroup', uppercamelcase: 'WindowGroup', snakecase: 'WINDOW_GROUP' },
];
